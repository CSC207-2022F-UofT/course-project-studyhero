package timer.timer_use_cases;

import timer.timer_entity.TimerEntity;

import java.util.Timer;
import java.util.TimerTask;

/**
 * Use case class for the timer.
 */
public class TimerInteractor implements TimerInputBoundary {

    /**
     * The outputs that will be generated by the interactor.
     */
    public TimerResponseModel timerResponseModel = new TimerResponseModel();
    /**
     * The Entity class for the timer.
     */
    public TimerEntity timerEntity = new TimerEntity();
    /**
     * The time that the timer will start at.
     */
    public String time;
    Timer timer = new Timer();

    /**
     * Starts the timer of timerEntity by creating a new instance of it and using its startTimer method. If the custom
     * time is the default value of -1, the preset time will be used. If not, the custom time will be used.
     */
    @Override
    public void startTimer() {
        timerEntity = new TimerEntity();
        timerEntity.setTimer(convertTimeToArray(time));
        timerEntity.startTimer();
        timer = new Timer();
        timer.scheduleAtFixedRate(new TimerTask() {
            @Override
            public void run() {
                timerResponseModel.setOutputTime(timerEntity.timeLeft);
            }
        }, 0, 100);
    }

    /**
     * Ends the timer of timerEntity using its endTimer method. The elapsed time is updated and timerEntity is deleted.
     */
    @Override
    public void endTimer() {
        timer.cancel();
        timer.purge();
        timerEntity.endTimer();
        timerResponseModel.setElapsedTime(timerResponseModel.getElapsedTime() + timerEntity.getElapsedTime());
        timerEntity = null;
    }

    /**
     * Sets the starting time of timerEntity using its setTimer method.
     * @param time the starting time
     */
    @Override
    public void setTimer(String time) {
        this.time = time;
    }

    /**
     * Gets the timerResponseModel.
     * @return the timerResponseModel
     */
    public TimerResponseModel getTimerResponseModel() {
        return timerResponseModel;
    }

    /**
     * Converts String time into an int array containing the hours, minutes and seconds of time.
     * @param time the time with format (00:00:00)
     * @return the input time in hours, minutes, seconds
     */
    private int[] convertTimeToArray(String time) {
        int[] convertedTime = new int[3];
        String[] times = time.split(":", 3);
        convertedTime[0] = Integer.parseInt(times[0]);
        convertedTime[1] = Integer.parseInt(times[1]);
        convertedTime[2] = Integer.parseInt(times[2]);
        return convertedTime;
    }
}
